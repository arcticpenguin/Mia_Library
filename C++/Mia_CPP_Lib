//Mia's C++ Library

/*
* Include C++ standard library here
*/
#include<iostream>
#include<vector>
#include<string>
#include<stack>
#include<queue>
#include<map>
using namespace std;

/*
* Include other files here
*/


//type of log
enum LOGTYPE  {LOG, ERROR, MESSAGE};
//log type strings should be consistant with LOGTYPE
static vector<string> logTypeStr = { "[LOG]: ", "[ERROR]: ", "[MESSAGE]: " };

class Utility
{
public:

	/* ----------------------------------------------------------------------- */
	/* Function    : Utility::log
	*
	* Description : print log string to console.
	*
	* Parameters  : string logStr		: the log string
	*				int type  			: type of log	
	*
	* Returns	     : void.
	*/
	static void log(string logStr, int type = LOGTYPE::LOG)
	{
		cout << logTypeStr[type] << endl;
	}

	/* ----------------------------------------------------------------------- */
	/* Function   : Utility::split
	*
	* Description : split a string using a pattern
	*
	* Parameters  : string str		: the input string
	*				string pattern: the split pattern	
	*
	* Returns	  : vector<string> : a list of strings
	*/
	static vector<string> split(string str, string pattern)
	{
		std::string::size_type pos;
		std::vector<std::string> result;
		str += pattern; //add a pattern at the end
		int size = str.size();

		for (int i = 0; i < size; i++)
		{
			pos = str.find(pattern, i);
			if (pos < size)
			{
				std::string s = str.substr(i, pos - i);
				if (s != "")
				{
					result.push_back(s);
				}
				i = pos + pattern.size() - 1;
			}
		}
		return result;
	}


};

